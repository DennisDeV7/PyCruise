# Project Prep: PyCruise 
Production Organization: Py-Cruisers
<hr>

## Team Agreement

The first step in project planning is establishing a Team Agreement. This will be used as the guideline for how your team will collaborate during project week.
Projects are stressful, and can ignite emotions that otherwise wouldn’t be a problem. It’s important that the safety and security of the group comes first, and that an agreement is in place to establish expectations and accountability among the whole group.

### Planning
Schedule a 1-hour meeting for your entire project team.
Use this time to review the Team Agreement requirements below, and establish consensus on how to handle each requirement.
### Deliverable
Start a public-facing GitHub markdown file, and include the following components in your team agreement submission.
### Cooperation Plan
Every person on your team is an asset. This is your chance to discover the hidden strengths and areas for growth for each team member.
#### Describe at least:
- What are the key strengths of each person on the team?
    - Liesl: Problem solving, adaptability, organized, prioritized
    - Dennis: Jack of all trades, leadership, data science
    - Marco: Back-end development, data, speaking, project mapping (trello)
    - Brentice: Resourceful, organized, 
    - Dom: UX/UI
- How can you best utilize these strengths in the execution of your project?
    - Liesl: Problem solve whenever we run into issues/bugs   - with the project. Hash it out and make a plan of action
    - Dennis: As a jack of all trades I can adapt fairly well to different areas of a project and contribute the best I can
    - Marco: getting a Trello board going for project workflow; database administration; working on behalf of back-end with anyone else that’s keen to join
    - Brentice: Having someone that is resourceful allows for a problem to multiple solutions found. 
    - Dom: Creating documentation and a deck that really delivers our MVP visually.
- In which professional competencies do you each want to develop greater strength?
    - Liesl: Communication skills, resourcefulness, time management
    - Dennis: I want to develop greater strength in the Craft and Communication
    - Marco: I’m always working on improving time management, I also have a major “opportunity for growth” in front-end dev work
    - Brentice: Problem solving skills and time management
    - Dom: Time management is something that this course has shown me how important it is as well as problem solving skills.
- Knowing that every person in your team needs to understand all aspects of the project, how do you plan to approach the day-to-day work?
Daily stand-ups, both before and after the work day. This will allow everyone to be able to put any concerns, questions, and/or suggestions on the table and we can discuss them through. Another way is through pair programming in which no one person is doing a portion of the project and at least two people have understanding and can expand upon it if need be. 
NOTE: Undoing, Redoing, Replacing, or otherwise steamrolling the project as an individual is considered to be unacceptable. Account for the inevitable divergence of ideas, execution tasks, and assignments of duties here.
<hr>

### Conflict Plan
Your team should agree on a process for handling disagreements, should they arise. It is better to have a plan in place ahead of time so you can all refer back to it when necessary.
- Describe at least:
    - What will be your group’s process to resolve conflict, when it arises?
        - When a problem arises, take the step back:
        - Identify the problem/issue
        - Identify possible solutions
- With each solution, consider them in the context of MVP (time constraints, project restraints, efficiency/Big O)
    - Agree on solution and move on
- What will your team do if one person is taking over the project and not letting the other members contribute?
    - Address this issue as soon as possible whenever the team meets up and gets a chance. Express this concern and try to come to a middle ground (i.e. pair programming). 
    - Create shared understanding and see if adjustments to the plan and division of responsibilities can be made. 
- How will you approach each other and the challenges of the project knowing that it is impossible for all members to be at the exact same place in understanding and skill level?
We strive to keep an open mindset and leave the channel open for communication and understanding. Other than mindset, we strive to keep our MVP as realistic as possible within the constraints of time and requirements. Also, there will be pair programming a majority of the time so not one person is doing part of the project.
- How will you raise concerns to members who are not adequately contributing?
    - Address this issue as soon as possible whenever the team meets up and gets a chance. Express this concern and try to come to a middle ground (i.e. pair programming). Create shared understanding and see if adjustments to the plan and division of responsibilities can be made. 
- How and when will you escalate the conflict if your resolution attempts are unsuccessful?
Reach out to some higher-ups (i.e. instructor, director) who have more hands on experience in conflict resolution and understand the constraints of the project week itself. 
<hr>

### Communication Plan
Before beginning to tackle the project, determine how your group will communicate with each other. This is not an individual effort. Make sure everyone feels comfortable with the identified methods of speaking up.
- Describe at least:
    - What hours will you be available to communicate?
        - Class hours (9am-6pm)
        - *open to communication any time but not heavy workload 
- What platforms will you use to communicate (ie. Slack, phone …)?
    - Slack
- How often will you take breaks?
10 minutes every hour, hour lunch at around noon
What is your plan if you start to fall behind?
Readdress either our time management plan or see if the issue is the MVP. If the MVP is too grand for the time constraints, adjust as needed. 
- How will you communicate after hours and on the weekend?
    - Slack (*open to communication any time but not heavy workload)
- What is your strategy for ensuring everyone’s voice is heard?
Stand-ups before starting the day and after the day. We will have mini-stand ups throughout the day when meeting to converse our code where we can also bring up issues/concerns. Stand-ups only end once everyone has spoken their mind.
- How will you ensure that you are creating a safe environment where everyone feels comfortable speaking up?
At daily stand-ups, give everyone the chance to speak up and express any concerns they need to, even if it’s not related to the immediate project. We will go into this project in the understanding that sometimes things may happen in daily life and work might be affected by that. In that case, we will address as need be. 
<hr>

### Work Plan
Explain your work plan to track whether everyone is contributing equally to all parts of the project, and that each person is working on “meaty” problems. This should prevent “lone wolf” efforts and “siloed” efforts.
NOTE: While researching and experimentation is always encouraged, writing and/or committing code to the project on your own during non-working hours or over the weekend is never acceptable. This puts the entire project at risk. Be explicit in calling out your work hours and the distribution of tasks.
- Describe at least:
- How you will identify tasks, assign tasks, know when they are complete, and manage work in general?
Create and follow an up-to-date trello (assign one person to trello to keep track).
- What project management tool will be used?
Trello
- Presentation Deck
Make a single copy of the Presentation Deck Template. Share your copy will all team members, so everyone is working from the same file.
Link to the shared doc in your project plan.
[Slide Deck](https://docs.google.com/presentation/d/1dLAXWrAwqBfjiwyTDRJiQ0YxLhiGyLFmU9PPEK8v4Og/edit?usp=sharing)

- Schedule your practice session
Work with your instructor to pre-schedule a date and time for your “practice run” of your presentation. This should either be an exact time, or a short window of time designated by your instructor. Plan for a 30-45 minute meeting during the class session before your actual presentation to allow time for both your practice run and feedback from the instructional team.
    - **Schedule later (probably Wednesday/Thursday)
Reminder as you work on and practice your presentations:
Expressions of gratitude should be heartfelt.
When not presenting, team members should make strong eye contact with the “audience” / camera.
Be positive, no matter how tired or burned out you may feel … “Your smiles can be heard over the phone”
<hr>

### Git Process
Plan out what your team’s Git workflow looks like for coding tasks.
Describe at least:
- What components of your project will live on GitHub?
    - Front end, back end, and all scripts/text files
- How will you share the repository with your teammates?
    - Create a group repo and allow access to the whole group. 
- What is your Git flow?
In doing our work on the code, we’ll checkout individual branches to work on and when we feel a feature is done, we’ll have one big merge party together to resolve any “git-uations”. 
For example:

- Git pull origin <working-dev-branch>
- Checkout -b <my-dev-branch>
- APC => git push origin <my-dev-branch>
- Git pull origin <working-dev-branch> to get the latest (to avoid merge conflicts)
- When done, create a PR ‘to main from <my-dev-branch>’
- Assign reviewers to the PR and call a meeting via agreed communications methods (see PR review workflow, below)
- Two members assist with code-review and bug squashing
- Two members ‘Approve’ the PR and merge it into <working-dev-branch>
- Everyone performs: git pull origin <working-dev-branch> into their own <my-dev-branch> so they have the latest (to avoid merge conflicts)
- When a merge conflict occurs, you need to notify the team, and the person whose code is in conflict (between the >>>> and <<<< areas) will help work through accepting changes so that previously accepted changes are not lost or otherwise altered without a PR review (see PR review workflow, below)


- Will you be using a PR review workflow? If so, consider:
    - How many people must review a PR?
        - Two
    - Who merges PRs?
        - The one built the feature/made the push 
    - How often will you merge?
        - At least once per day; probably around lunch to handle any conflicts
        - Can make more merges throughout the day 
    - How will you communicate that it’s time to merge?
        - Set a time and say it’s time to merge
<hr>

